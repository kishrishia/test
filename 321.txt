local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Debris = game:GetService("Debris")
local RunService = game:GetService("RunService")
local CurrentCamera = workspace.CurrentCamera

local PlayerGui = Players.LocalPlayer:WaitForChild("PlayerGui")

-- Offset for the confetti effect relative to the camera
local ConfettiOffset = CFrame.new(0, 0, -4.5) * CFrame.Angles(math.rad(90), 0, 0)
local ImpactConfettiOffset = CFrame.new(0, 0, -4) -- Offset for Impact Confetti

-- Play the confetti effect
local function PlayConfettiEffect(duration)
	local confettiInstance = script:FindFirstChild("Confetti")
	if not confettiInstance then
		warn("Confetti object not found in the script!")
		return
	end

	confettiInstance = confettiInstance:Clone()
	confettiInstance.Parent = CurrentCamera

	-- Update the confetti's position relative to the camera
	local connection
	connection = RunService.Heartbeat:Connect(function()
		if CurrentCamera then
			confettiInstance.CFrame = CurrentCamera.CFrame * ConfettiOffset
		end
	end)

	-- Stop the confetti effect after the duration
	task.delay(duration, function()
		for _, particleEmitter in ipairs(confettiInstance:GetDescendants()) do
			if particleEmitter:IsA("ParticleEmitter") then
				particleEmitter.Enabled = false
			end
		end

		task.wait(1) -- Give particles time to finish
		if connection then
			connection:Disconnect() -- Disconnect the heartbeat update
		end
		confettiInstance:Destroy() -- Clean up the confetti instance
	end)
end

-- Play the impact confetti effect
local function EmitImpactConfetti()
	local impactConfettiInstance = script:FindFirstChild("ImpactConfetti")
	if not impactConfettiInstance then
		warn("Impact Confetti object not found in the script!")
		return
	end

	impactConfettiInstance = impactConfettiInstance:Clone()
	impactConfettiInstance.Parent = CurrentCamera
	impactConfettiInstance.CFrame = CurrentCamera.CFrame * ImpactConfettiOffset

	-- Emit confetti particles immediately
	for _, particleEmitter in ipairs(impactConfettiInstance:GetDescendants()) do
		if particleEmitter:IsA("ParticleEmitter") then
			particleEmitter:Emit(50) -- Emit 50 confetti particles
		end
	end

	-- Clean up after a short duration
	Debris:AddItem(impactConfettiInstance, 3)
end

-- Add rotation to a UI element
local function AddRotation(uiElement, rotationSpeed)
	if not uiElement then return end
	local rotationTweenInfo = TweenInfo.new(rotationSpeed, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1, true)
	local goal = {Rotation = uiElement.Rotation + 360}
	TweenService:Create(uiElement, rotationTweenInfo, goal):Play()
end

-- Show Trait Icon Function
local function ShowTraitIcon(traitName)
	-- Validate
	local traitIconTemplate = script:FindFirstChild("TraitIconDisplay")
	local gradientRef = script:FindFirstChild("Gradient")
	local traitIconsFolder = script:FindFirstChild("TraitIcons") -- Check if TraitIcons exists

	if not traitIconTemplate or not gradientRef then
		warn("Missing TraitIconDisplay or Gradient in script.")
		return
	end

	if not traitIconsFolder then
		warn("TraitIcons folder not found in the script!")
		return
	end

	-- Emit Impact Confetti immediately
	EmitImpactConfetti()

	-- Delay all animations for 0.2 seconds
	task.delay(0.2, function()
		local gui = traitIconTemplate:Clone()
		gui.Background.Transparency = 1
		gui.Main.LightRay.ImageTransparency = 0
		gui.Main.LightRay.Size = UDim2.fromScale(1.2, 1.2)
		gui.Main.LightRay2.ImageTransparency = 0 -- New animation for LightRay2
		gui.Main.LightRay2.Size = UDim2.fromScale(1.2, 1.2) -- New animation for LightRay2
		gui.Main.LightRay3.ImageTransparency = 0 -- New animation for LightRay3
		gui.Main.LightRay3.Size = UDim2.fromScale(1.2, 1.2) -- New animation for LightRay3
		gui.Main.Shine.ImageTransparency = 0 -- New animation for Shine
		gui.Main.Shine.Size = UDim2.fromScale(3.5, 3.5) -- New animation for Shine
		gui.Vignette.ImageTransparency = 0
		gui.Parent = PlayerGui

		-- Ensure the Vignette exists
		local vignette = gui:FindFirstChild("Vignette")
		if not vignette then
			warn("Vignette object not found in TraitIconDisplay!")
			return
		end

		-- Animate the Vignette
		TweenService:Create(vignette, TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
			ImageTransparency = 1
		}):Play()

		-- Animate the Background
		TweenService:Create(gui.Background, TweenInfo.new(0.9, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { -- Slightly faster
			BackgroundTransparency = 0.7
		}):Play()

		-- Animate the LightRay
		gui.Main.LightRay.ImageTransparency = 1
		local lightRayGradient = gradientRef:Clone()
		lightRayGradient.Parent = gui.Main.LightRay

		TweenService:Create(gui.Main.LightRay, TweenInfo.new(1.7, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { -- Slightly slower animation
			ImageTransparency = 0
		}):Play()
		TweenService:Create(gui.Main.LightRay, TweenInfo.new(2.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), { -- Slightly slower animation
			Size = UDim2.fromScale(1.4, 1.4)
		}):Play()

		-- Add rotation to LightRay
		AddRotation(gui.Main.LightRay, 5)

		-- Animate the Gradient
		lightRayGradient.Offset = Vector2.new(-0.3, 0)
		lightRayGradient.Rotation = 50
		TweenService:Create(lightRayGradient, TweenInfo.new(1.7, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), { -- Slightly slower animation
			Offset = Vector2.new(1.6, 0)
		}):Play()

		-- Animate the LightRay2
		gui.Main.LightRay2.ImageTransparency = 1
		local lightRay2Gradient = gradientRef:Clone()
		lightRay2Gradient.Parent = gui.Main.LightRay2

		TweenService:Create(gui.Main.LightRay2, TweenInfo.new(2.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { -- New LightRay2 animation
			ImageTransparency = 0
		}):Play()
		TweenService:Create(gui.Main.LightRay2, TweenInfo.new(2.5, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), { -- New LightRay2 animation
			Size = UDim2.fromScale(1.6, 1.6)
		}):Play()

		-- Add rotation to LightRay2
		AddRotation(gui.Main.LightRay2, 6)

		-- Animate the LightRay3
		gui.Main.LightRay3.ImageTransparency = 1
		local lightRay3Gradient = gradientRef:Clone()
		lightRay3Gradient.Parent = gui.Main.LightRay3

		TweenService:Create(gui.Main.LightRay3, TweenInfo.new(2.4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { -- New LightRay3 animation
			ImageTransparency = 0
		}):Play()
		TweenService:Create(gui.Main.LightRay3, TweenInfo.new(3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), { -- New LightRay3 animation
			Size = UDim2.fromScale(1.8, 1.8)
		}):Play()

		-- Add rotation to LightRay3
		AddRotation(gui.Main.LightRay3, 7)

		-- Animate the Shine
		TweenService:Create(gui.Main.Shine, TweenInfo.new(1.7, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { -- New Shine animation
			ImageTransparency = 0
		}):Play()
		TweenService:Create(gui.Main.Shine, TweenInfo.new(2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), { -- New Shine animation
			Size = UDim2.fromScale(0.6, 0.6)
		}):Play()

		-- Load Trait Icon
		local icon = traitIconsFolder:FindFirstChild(traitName) -- Check TraitIcons folder for the given traitName
		if not icon then
			warn("Trait icon not found: " .. tostring(traitName))
			return
		end

		local iconClone = icon:Clone()
		local gradient = iconClone:FindFirstChildOfClass("UIGradient")
		if not gradient then
			-- Clone the gradient from the reference and apply it to the Trait Icon
			gradient = gradientRef:Clone()
			gradient.Parent = iconClone
		end

		iconClone.ImageTransparency = 1
		iconClone.AnchorPoint = Vector2.new(0.5, 0.5)
		iconClone.Size = UDim2.fromScale(0.45, 0.45)
		iconClone.Position = UDim2.fromScale(0.5, 0.5)
		iconClone.Parent = gui.Main

		-- Animate the Trait Icon
		TweenService:Create(iconClone, TweenInfo.new(2.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), { -- Slightly slower animation
			Size = UDim2.fromScale(0.6, 0.6)
		}):Play()
		TweenService:Create(iconClone, TweenInfo.new(1.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { -- Slightly slower animation
			ImageTransparency = 0
		}):Play()

		-- Animate the Icon Gradient with a 0.5s delay
		gradient.Offset = Vector2.new(-0.3, 0)
		gradient.Rotation = 45

		-- Delay the animation by 0.5 seconds
		task.delay(0.5, function()
			TweenService:Create(gradient, TweenInfo.new(1.5, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), { -- Slightly slower animation
				Offset = Vector2.new(1.6, 0)
			}):Play()
		end)

		-- Play confetti effect
		PlayConfettiEffect(1.5) -- Confetti duration remains the same

		task.delay(0.8, function() -- Slower delay
			TweenService:Create(gui.Main.LightRay, TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), { -- Faster fade-out
				ImageTransparency = 1
			}):Play()
			TweenService:Create(gui.Main.LightRay2, TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), { -- New LightRay2 fade-out
				ImageTransparency = 1
			}):Play()
			TweenService:Create(gui.Main.LightRay3, TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), { -- New LightRay3 fade-out
				ImageTransparency = 1
			}):Play()
			TweenService:Create(gui.Main.Shine, TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), { -- New Shine fade-out
				ImageTransparency = 1
			}):Play()
		end)

		task.wait(1.5) -- Increased wait time for slower animations
		TweenService:Create(gui.Background, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { -- Faster fade-out
			BackgroundTransparency = 1
		}):Play()
		Debris:AddItem(gui, 0.6) -- Cleanup faster
	end)
end

-- Key Press Detection for Testing
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end
	if input.KeyCode == Enum.KeyCode.F then
		print("F key pressed: Testing Trait Icon Display with Confetti Effect")
		ShowTraitIcon("Test") -- Replace "Monarch" with a valid trait name in your game
	end
end)
