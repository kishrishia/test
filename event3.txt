-- Autofarm Event Script with Desire Boss + Summer Quest

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local VirtualInputManager = game:GetService("VirtualInputManager")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HRP = Character:WaitForChild("HumanoidRootPart")
local Handler = Character:WaitForChild("PlayerHandler"):WaitForChild("HandlerEvent")
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- === CONFIG ===
local QUEST_NAME = "Summer's Eclipse"
local questPath = function()
	return PlayerGui.Main.QuestAlertFrame.QuestGUI:FindFirstChild(QUEST_NAME)
end

local targetQueue = {
	{ui = "Water Specialist Lv.80", npc = "Water Specialist Lv.80"},
	{ui = "Festive Soldier Lv.80", npc = "Festive Soldier Lv.80"},
	{ui = "Festive Elite Lv.90", npc = "Festive Elite Lv.90"},
}

-- === UTILS ===
local function fireDialogue(choice)
	ReplicatedStorage.Remote.Event.Dialogue:FireServer({{ Choice = choice }})
end

local function fireRemote(args, remoteName)
	ReplicatedStorage.Remote.Event[remoteName]:FireServer(unpack(args))
end

local function fireRiderManager(args)
	ReplicatedStorage.Remote.Event.RiderManager:FireServer(unpack(args))
end

local function m1Attack(pos)
	local args = {[1] = {
		CombatAction = true,
		MouseData = CFrame.new(pos),
		Input = "Mouse2",
		HeavyAttack = true,
		Attack = true
	}}
	Handler:FireServer(unpack(args))
end

local function useSkill(pos)
	local args = {[1] = {
		Key = "R",
		Skill = true,
		MouseData = CFrame.new(pos)
	}}
	Handler:FireServer(unpack(args))
end

local function useSkill2(pos)
	local args = {[1] = {
		Key = "V",
		Skill = true,
		MouseData = CFrame.new(pos)
	}}
	Handler:FireServer(unpack(args))
end

local function clickQuestButton()
	local btn = PlayerGui:WaitForChild("Main"):WaitForChild("FunctionFrame"):WaitForChild("QuestButton")
	if btn and btn.AbsolutePosition then
		local pos = btn.AbsolutePosition + (btn.AbsoluteSize / 2)
		VirtualInputManager:SendMouseButtonEvent(pos.X, pos.Y, 0, true, game, 0)
		task.wait()
		VirtualInputManager:SendMouseButtonEvent(pos.X, pos.Y, 0, false, game, 0)
	end
end

local function tpTo(position)
	LocalPlayer.Character:MoveTo(position)
end

-- === SUMMER QUEST ===
local function startQuest()
	tpTo(Vector3.new(-969, 26, -56))
	task.wait(10)
	fireclickdetector(Workspace.NPC.Sommic.ClickDetector)
	task.wait(2)
	local args = {[1]={["Choice"]="[ Event Quest ]"}}
	game:GetService("ReplicatedStorage").Remote.Event.Dialogue:FireServer(unpack(args))
	task.wait(2)
	local args = {[1]={["Exit"]=true}}
	game:GetService("ReplicatedStorage").Remote.Event.Dialogue:FireServer(unpack(args))
end

local function completeQuest()
	tpTo(Vector3.new(-969, 26, -56))
	task.wait(10)
	fireclickdetector(Workspace.NPC.Sommic.ClickDetector)
	task.wait(2)
	local args = {[1]={["Choice"]="[ Event Quest ]"}}
	game:GetService("ReplicatedStorage").Remote.Event.Dialogue:FireServer(unpack(args))
	task.wait(2)
	local args = {[1]={["Choice"]="Yep!"}}
	game:GetService("ReplicatedStorage").Remote.Event.Dialogue:FireServer(unpack(args))
	task.wait(2)
	local args = {[1]={["Exit"]=true}}
	game:GetService("ReplicatedStorage").Remote.Event.Dialogue:FireServer(unpack(args))
end

local function waitForQuestText()
	clickQuestButton()
	repeat
		local label = questPath()
		if label and label.Text then
			if label.Text:match("%(.-/.-%)") or label.Text:find("Quest Completed") then
				break
			end
		end
		task.wait(0.5)
	until false
end

local function isQuestComplete()
	local q = questPath()
	return q and q.Text and q.Text:find("Quest Completed")
end

local function killTarget(npcName)
	local npc = Workspace.Lives:FindFirstChild(npcName)
	if npc and npc:FindFirstChild("Humanoid") then
		local maxRetries = 3
		local retryCount = 0

		repeat
			local humanoid = npc:FindFirstChild("Humanoid")
			if not humanoid or humanoid.Health <= 0 then break end

			local rootPart = npc:FindFirstChild("HumanoidRootPart")
			if rootPart then
				local behindPos = rootPart.Position - rootPart.CFrame.LookVector * 3
				Character:MoveTo(behindPos + Vector3.new(0, 0, 0))

				HRP.CFrame = CFrame.new(HRP.Position, rootPart.Position)
				
				useSkill2(rootPart.Position)
				task.wait(0.3)
				useSkill2(rootPart.Position)
				task.wait(0.3)
				m1Attack(rootPart.Position)
				task.wait(0.5)
				m1Attack(rootPart.Position)
				task.wait(0.5)
			else
				retryCount = retryCount + 1
				if retryCount <= maxRetries then
					warn("HumanoidRootPart missing, retrying... Attempt " .. retryCount .. "/" .. maxRetries)
					task.wait(2)
				else
					warn("Max retries reached, skipping target.")
					break
				end
			end
		until not npc:FindFirstChild("Humanoid") or npc.Humanoid.Health <= 0 or retryCount > maxRetries
	end
end

-- === DESIRE BOSS ===
local function desireQuestLabel()
	local gui = PlayerGui.Main.QuestAlertFrame.QuestGUI:FindFirstChild("Desire Games")
	return gui and gui.Text or nil
end

local function handlePossessedRider()
	local maxRetries = 3
	local retryCount = 0

	repeat
		local questText = desireQuestLabel()
		if questText and questText:find("Quest Completed") then
			tpTo(Vector3.new(-1555, 23, 824))
			task.wait(10)
			local replicator = Workspace.NPC:FindFirstChild("ARKReplicator")
			if replicator and replicator:FindFirstChild("ClickDetector") then
				fireclickdetector(replicator.ClickDetector)
				task.wait(1)
				fireRemote({{ Choice = "[ Desire Games ]" }}, "Dialogue")
				task.wait(2)
				fireRemote({{ Choice = "Completed it." }}, "Dialogue")
				task.wait(2)
				fireRemote({{ Exit = true }}, "Dialogue")
				return
			end
		end

		local rider = Workspace.Lives:FindFirstChild("Possessed Rider Lv.90")
		if not rider then
			retryCount = retryCount + 1
			if retryCount <= maxRetries then
				warn("Possessed Rider not found, retrying... Attempt " .. retryCount .. "/" .. maxRetries)
				task.wait(2)
			else
				warn("Max retries reached, skipping Possessed Rider.")
				break
			end
		else
			local rootPart = rider:FindFirstChild("HumanoidRootPart")
			if not rootPart then
				retryCount = retryCount + 1
				if retryCount <= maxRetries then
					warn("HumanoidRootPart missing, retrying... Attempt " .. retryCount .. "/" .. maxRetries)
					task.wait(2)
				else
					warn("Max retries reached, skipping Possessed Rider.")
					break
				end
			else
				tpTo(Vector3.new(-1555, 23, 824))
				task.wait(10)
				local replicator = Workspace.NPC:FindFirstChild("ARKReplicator")
				if replicator and replicator:FindFirstChild("ClickDetector") then
					fireclickdetector(replicator.ClickDetector)
					task.wait(1)
					fireRemote({{ Choice = "[ Desire Games ]" }}, "Dialogue")
					task.wait(0.5)
					fireRemote({{ Exit = true }}, "Dialogue")
					task.wait(0.5)
					local args = {[1]="War"} game:GetService("ReplicatedStorage").Remote.Event.RiderManager:FireServer(unpack(args))

					repeat task.wait(0.5) until desireQuestLabel()

					killTarget("Possessed Rider Lv.90")
					task.wait(8)

					local chest = Workspace:FindFirstChild("EFX") and Workspace.EFX:FindFirstChild("InteractableChest") and Workspace.EFX.InteractableChest:FindFirstChild("ClaimChest")
					if chest and chest:IsA("ProximityPrompt") then
						fireproximityprompt(chest, 0)
					end
					task.wait(3)
					for i = 1, 5 do
						local args = {[1]="Progrise Cache"}
						game:GetService("ReplicatedStorage").Remote.Function.InventoryFunction:InvokeServer(unpack(args))
						local args = {[1]="War's Box"}
						game:GetService("ReplicatedStorage").Remote.Function.InventoryFunction:InvokeServer(unpack(args))
					end
					local args = {[1]="War"} game:GetService("ReplicatedStorage").Remote.Event.RiderManager:FireServer(unpack(args))
					task.wait(0.5)
					for _ = 1, 20 do
						questText = desireQuestLabel()
						if questText and questText:find("Quest Completed") then break end
						task.wait(0.5)
					end

					tpTo(Vector3.new(-1555, 23, 824))
					task.wait(6)
					fireclickdetector(replicator.ClickDetector)
					task.wait(1)
					fireRemote({{ Choice = "[ Desire Games ]" }}, "Dialogue")
					task.wait(2)
					fireRemote({{ Choice = "Completed it." }}, "Dialogue")
					task.wait(2)
					fireRemote({{ Exit = true }}, "Dialogue")
					return
				end
			end
		end
	until retryCount > maxRetries
end

-- === MAIN LOOP ===
while true do
	handlePossessedRider()
	startQuest()
	waitForQuestText()

	local index = 1
	while not isQuestComplete() do
		local target = targetQueue[index]
		if target then
			local npc = Workspace.Lives:FindFirstChild(target.npc)
			if npc and npc:FindFirstChild("Humanoid") and npc.Humanoid.Health > 0 then
				killTarget(target.npc)
			end
			-- Move to next target only if current one is dead or invalid
			index = (index % #targetQueue) + 1
		end
		task.wait(0.5)
		clickQuestButton()
	end

	completeQuest()
end
