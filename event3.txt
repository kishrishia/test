local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local VirtualInputManager = game:GetService("VirtualInputManager")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HRP = Character:WaitForChild("HumanoidRootPart")
local Handler = Character:WaitForChild("PlayerHandler"):WaitForChild("HandlerEvent")
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- === CONFIG ===
local QUEST_NAME = "Summer's Eclipse"
local questPath = function()
	return PlayerGui.Main.QuestAlertFrame.QuestGUI:FindFirstChild(QUEST_NAME)
end

local targetQueue = {
	{ui = "Water Specialist Lv.80", npc = "Water Specialist Lv.80"},
	{ui = "Festive Soldier Lv.80", npc = "Festive Soldier Lv.80"},
	{ui = "Festive Elite Lv.90", npc = "Festive Elite Lv.90"},
}

-- === UTILS ===
local function fireDialogue(choice)
	if ReplicatedStorage.Remote.Event.Dialogue then
		ReplicatedStorage.Remote.Event.Dialogue:FireServer({{ Choice = choice }})
	else
		warn("Dialogue remote event is nil")
	end
end

local function fireRemote(args, remoteName)
	if ReplicatedStorage.Remote.Event[remoteName] then
		ReplicatedStorage.Remote.Event[remoteName]:FireServer(unpack(args))
	else
		warn(remoteName .. " remote event is nil")
	end
end

local function fireRiderManager(args)
	if ReplicatedStorage.Remote.Event.RiderManager then
		ReplicatedStorage.Remote.Event.RiderManager:FireServer(unpack(args))
	else
		warn("RiderManager remote event is nil")
	end
end

local function m1Attack(pos)
	local args = {[1] = {
		CombatAction = true,
		MouseData = CFrame.new(pos),
		Input = "Mouse2",
		HeavyAttack = true,
		Attack = true
	}}
	if Handler then
		Handler:FireServer(unpack(args))
	else
		warn("Handler event is nil")
	end
end

local function useSkill(pos)
	local args = {[1] = {
		Key = "R",
		Skill = true,
		MouseData = CFrame.new(pos)
	}}
	if Handler then
		Handler:FireServer(unpack(args))
	else
		warn("Handler event is nil")
	end
end

local function useSkill2(pos)
	local args = {[1] = {
		Key = "V",
		Skill = true,
		MouseData = CFrame.new(pos)
	}}
	if Handler then
		Handler:FireServer(unpack(args))
	else
		warn("Handler event is nil")
	end
end

local function clickQuestButton()
	local btn = PlayerGui:WaitForChild("Main"):WaitForChild("FunctionFrame"):WaitForChild("QuestButton")
	if btn and btn.AbsolutePosition then
		local pos = btn.AbsolutePosition + (btn.AbsoluteSize / 2)
		VirtualInputManager:SendMouseButtonEvent(pos.X, pos.Y, 0, true, game, 0)
		task.wait()
		VirtualInputManager:SendMouseButtonEvent(pos.X, pos.Y, 0, false, game, 0)
	end
end

local function tpTo(position)
	if Character then
		Character:MoveTo(position)
	else
		warn("Character is nil, cannot teleport")
	end
end

-- === SUMMER QUEST ===
local function startQuest()
	tpTo(Vector3.new(-969, 26, -56))
	task.wait(3)
	local sommic = Workspace.NPC:FindFirstChild("Sommic")
	local maxRetries = 5
	local retryCount = 0
	while not sommic or not sommic:FindFirstChild("ClickDetector") do
		retryCount = retryCount + 1
		if retryCount > maxRetries then
			warn("Max retries reached for Sommic ClickDetector")
			return
		end
		warn("Sommic or ClickDetector not found, retrying... Attempt " .. retryCount .. "/" .. maxRetries)
		task.wait(2)
		sommic = Workspace.NPC:FindFirstChild("Sommic")
	end
	if sommic and sommic:FindFirstChild("ClickDetector") then
		local clickDetector = sommic:FindFirstChild("ClickDetector")
		if clickDetector and typeof(clickDetector) == "ClickDetector" then
			fireclickdetector(clickDetector)
			task.wait(2)
			fireDialogue("[ Event Quest ]")
			task.wait(2)
			fireDialogue({["Exit"] = true})
		else
			warn("Invalid ClickDetector on Sommic")
		end
	end
end

local function completeQuest()
	tpTo(Vector3.new(-969, 26, -56))
	task.wait(3)
	local sommic = Workspace.NPC:FindFirstChild("Sommic")
	local maxRetries = 5
	local retryCount = 0
	while not sommic or not sommic:FindFirstChild("ClickDetector") do
		retryCount = retryCount + 1
		if retryCount > maxRetries then
			warn("Max retries reached for Sommic ClickDetector")
			return
		end
		warn("Sommic or ClickDetector not found, retrying... Attempt " .. retryCount .. "/" .. maxRetries)
		task.wait(2)
		sommic = Workspace.NPC:FindFirstChild("Sommic")
	end
	if sommic and sommic:FindFirstChild("ClickDetector") then
		local clickDetector = sommic:FindFirstChild("ClickDetector")
		if clickDetector and typeof(clickDetector) == "ClickDetector" then
			fireclickdetector(clickDetector)
			task.wait(2)
			fireDialogue("[ Event Quest ]")
			task.wait(2)
			fireDialogue("Yep!")
			task.wait(2)
			fireDialogue({["Exit"] = true})
		else
			warn("Invalid ClickDetector on Sommic")
		end
	end
end

local function waitForQuestText()
	clickQuestButton()
	repeat
		local label = questPath()
		if label and label.Text then
			if label.Text:match("%(.-/.-%)") or label.Text:find("Quest Completed") then
				break
			end
		end
		task.wait(0.5)
	until false
end

local function isQuestComplete()
	local q = questPath()
	return q and q.Text and q.Text:find("Quest Completed")
end

local function killTarget(npcName)
	local npc = Workspace.Lives:FindFirstChild(npcName)
	if npc and npc:FindFirstChild("Humanoid") then
		local maxRetries = 3
		local retryCount = 0
		repeat
			local humanoid = npc:FindFirstChild("Humanoid")
			if not humanoid or humanoid.Health <= 0 then break end
			local rootPart = npc:FindFirstChild("HumanoidRootPart")
			if rootPart then
				local behindPos = rootPart.Position - rootPart.CFrame.LookVector * 3
				tpTo(behindPos + Vector3.new(0, 0, 0))
				HRP.CFrame = CFrame.new(HRP.Position, rootPart.Position)
				useSkill2(rootPart.Position)
				task.wait(0.3)
				useSkill2(rootPart.Position)
				task.wait(0.3)
				useSkill(rootPart.Position)
				task.wait(0.3)
				useSkill(rootPart.Position)
				task.wait(0.3)
				m1Attack(rootPart.Position)
				task.wait(0.5)
			else
				retryCount = retryCount + 1
				if retryCount <= maxRetries then
					warn("HumanoidRootPart missing, retrying... Attempt " .. retryCount .. "/" .. maxRetries)
					task.wait(2)
				else
					warn("Max retries reached for " .. npcName)
					break
				end
			end
		until not npc:FindFirstChild("Humanoid") or npc.Humanoid.Health <= 0 or retryCount > maxRetries
	end
end

-- === DESIRE BOSS ===
local function handlePossessedRider()
	local maxRetries = 5
	local retryCount = 0

	-- Check for Possessed Rider first
	local rider = Workspace.Lives:FindFirstChild("Possessed Rider Lv.90")
	if rider and rider:FindFirstChild("Humanoid") and rider.Humanoid.Health > 0 then
		warn("Possessed Rider found, teleporting to ARKReplicator for quest...")
		tpTo(Vector3.new(-1555, 23, 824))
		task.wait(2)
		local replicator = Workspace.NPC:FindFirstChild("ARKReplicator")
		retryCount = 0
		while not replicator or not replicator:FindFirstChild("ClickDetector") do
			retryCount = retryCount + 1
			if retryCount > maxRetries then
				warn("Max retries reached for ARKReplicator after TP")
				return
			end
			warn("ARKReplicator or ClickDetector not found after TP, retrying... Attempt " .. retryCount .. "/" .. maxRetries)
			task.wait(3)
			replicator = Workspace.NPC:FindFirstChild("ARKReplicator")
		end
		if replicator and replicator:FindFirstChild("ClickDetector") then
			local clickDetector = replicator:FindFirstChild("ClickDetector")
			if clickDetector and typeof(clickDetector) == "ClickDetector" then
				warn("Attempting to get quest from ARKReplicator...")
				fireclickdetector(clickDetector)
				task.wait(1)
				fireDialogue("[ Desire Games ]")
				task.wait(0.5)
				fireDialogue({["Exit"] = true})
				task.wait(0.5)
				local args = {[1]="War"}
				fireRiderManager(args)
				return
			else
				warn("Invalid ClickDetector on ARKReplicator after TP")
			end
		end
	else
		warn("No active Possessed Rider found, checking quest completion...")
	end

	repeat
		local questText = desireQuestLabel()
		if questText and questText:find("Quest Completed") then
			tpTo(Vector3.new(-1555, 23, 824))
			task.wait(2)
			local replicator = Workspace.NPC:FindFirstChild("ARKReplicator")
			retryCount = 0
			while not replicator or not replicator:FindFirstChild("ClickDetector") do
				retryCount = retryCount + 1
				if retryCount > maxRetries then
					warn("Max retries reached for ARKReplicator post-quest")
					return
				end
				warn("ARKReplicator or ClickDetector not found post-quest, retrying... Attempt " .. retryCount .. "/" .. maxRetries)
				task.wait(3)
				replicator = Workspace.NPC:FindFirstChild("ARKReplicator")
			end
			if replicator then
				local clickDetector = replicator:FindFirstChild("ClickDetector")
				if clickDetector and typeof(clickDetector) == "ClickDetector" then
					warn("Attempting fireclickdetector on ARKReplicator post-quest...")
					local success, err = pcall(function() fireclickdetector(clickDetector) end)
					if success then
						task.wait(1)
						warn("fireclickdetector succeeded, proceeding with dialogue...")
						fireDialogue("[ Desire Games ]")
						task.wait(2)
						fireDialogue("Completed it.")
						task.wait(2)
						fireDialogue({["Exit"] = true})
						return
					else
						warn("fireclickdetector failed post-quest: " .. tostring(err))
					end
				else
					warn("Invalid ClickDetector on ARKReplicator post-quest")
				end
			end
		end

		if not rider or (rider and rider:FindFirstChild("Humanoid") and rider.Humanoid.Health <= 0) then
			local rootPart = rider and rider:FindFirstChild("HumanoidRootPart")
			if not rootPart then
				retryCount = retryCount + 1
				if retryCount <= maxRetries then
					warn("HumanoidRootPart missing for Possessed Rider, retrying... Attempt " .. retryCount .. "/" .. maxRetries)
					task.wait(2)
				else
					warn("Max retries reached for Possessed Rider")
					return
				end
			else
				tpTo(Vector3.new(-1555, 23, 824))
				task.wait(0.5)
				local replicator = Workspace.NPC:FindFirstChild("ARKReplicator")
				retryCount = 0
				while not replicator or not replicator:FindFirstChild("ClickDetector") do
					retryCount = retryCount + 1
					if retryCount > maxRetries then
						warn("Max retries reached for ARKReplicator after TP")
						return
					end
					warn("ARKReplicator or ClickDetector not found after TP, retrying... Attempt " .. retryCount .. "/" .. maxRetries)
					task.wait(3)
					replicator = Workspace.NPC:FindFirstChild("ARKReplicator")
				end
				if replicator then
					local clickDetector = replicator:FindFirstChild("ClickDetector")
					if clickDetector and typeof(clickDetector) == "ClickDetector" then
						warn("Attempting fireclickdetector on ARKReplicator after TP...")
						local success, err = pcall(function() fireclickdetector(clickDetector) end)
						if success then
							task.wait(1)
							warn("fireclickdetector succeeded, proceeding with dialogue...")
							fireDialogue("[ Desire Games ]")
							task.wait(0.5)
							fireDialogue({["Exit"] = true})
							task.wait(0.5)
							local args = {[1]="War"}
							fireRiderManager(args)

							repeat task.wait(0.5) until desireQuestLabel()

							killTarget("Possessed Rider Lv.90")
							task.wait(8)

							local chest = Workspace:FindFirstChild("EFX") and Workspace.EFX:FindFirstChild("InteractableChest") and Workspace.EFX.InteractableChest:FindFirstChild("ClaimChest")
							if chest and chest:IsA("ProximityPrompt") then
								fireproximityprompt(chest, 0)
							end
							task.wait(3)
							for i = 1, 5 do
								local args = {[1]="Progrise Cache"}
								if ReplicatedStorage.Remote.Function.InventoryFunction then
									ReplicatedStorage.Remote.Function.InventoryFunction:InvokeServer(unpack(args))
								else
									warn("InventoryFunction is nil")
								end
								local args = {[1]="War's Box"}
								if ReplicatedStorage.Remote.Function.InventoryFunction then
									ReplicatedStorage.Remote.Function.InventoryFunction:InvokeServer(unpack(args))
								else
									warn("InventoryFunction is nil")
								end
							end
							local args = {[1]="War"}
							fireRiderManager(args)
							task.wait(0.5)
							for _ = 1, 20 do
								questText = desireQuestLabel()
								if questText and questText:find("Quest Completed") then break end
								task.wait(0.5)
							end

							tpTo(Vector3.new(-1555, 23, 824))
							task.wait(0.5)
							retryCount = 0
							while not replicator or not replicator:FindFirstChild("ClickDetector") do
								retryCount = retryCount + 1
								if retryCount > maxRetries then
									warn("Max retries reached for ARKReplicator post-chest")
									return
								end
								warn("ARKReplicator or ClickDetector not found post-chest, retrying... Attempt " .. retryCount .. "/" .. maxRetries)
								task.wait(3)
								replicator = Workspace.NPC:FindFirstChild("ARKReplicator")
							end
							if replicator then
								local clickDetector = replicator:FindFirstChild("ClickDetector")
								if clickDetector and typeof(clickDetector) == "ClickDetector" then
									warn("Attempting fireclickdetector on ARKReplicator post-chest...")
									local success, err = pcall(function() fireclickdetector(clickDetector) end)
									if success then
										task.wait(1)
										warn("fireclickdetector succeeded, proceeding with dialogue...")
										fireDialogue("[ Desire Games ]")
										task.wait(2)
										fireDialogue("Completed it.")
										task.wait(2)
										fireDialogue({["Exit"] = true})
									else
										warn("fireclickdetector failed post-chest: " .. tostring(err))
									end
								else
									warn("Invalid ClickDetector on ARKReplicator post-chest")
								end
							end
							return
						end
					end
				end
			end
		end
	until retryCount > maxRetries
end

-- === MAIN LOOP ===
while true do
	handlePossessedRider()
	startQuest()
	waitForQuestText()

	local index = 1
	while not isQuestComplete() do
		local target = targetQueue[index]
		if target then
			local npc = Workspace.Lives:FindFirstChild(target.npc)
			if npc and npc:FindFirstChild("Humanoid") and npc.Humanoid.Health > 0 then
				killTarget(target.npc)
			end
			index = (index % #targetQueue) + 1
		end
		task.wait(0.5)
		clickQuestButton()
	end

	completeQuest()
end
